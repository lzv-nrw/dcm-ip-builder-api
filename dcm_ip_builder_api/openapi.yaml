openapi: 3.0.3
info:
  title: DCM IP Builder - OpenAPI-Document
  description: |-
    This is the OpenAPI 3.0 specification describing the containers used
    for building and validating Information Packages (IP) in the context
    of the dcm in the lzvnrw-project.
  version: 5.1.0
servers:
  - url: 'http://localhost:8080/'
externalDocs:
  description: See project hosted by University of MÃ¼nster
  url: https://zivgitlab.uni-muenster.de/ULB/lzvnrw/team-se/dcm-ip-builder-api
tags:
  - name: build
    description: IP building-related endpoints
  - name: validation
    description: validation-related endpoints
paths:
  /ping:
    get:
      summary: ping
      description: Use as connection test. Returns 'pong'.
      operationId: ping
      responses:
        '200':
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: pong
        '400':
          $ref: '#/components/responses/400BadRequest'
  /status:
    get:
      summary: container status
      description: Returns Status (readiness) of container.
      operationId: get_status
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          $ref: '#/components/responses/400BadRequest'
  /identify:
    get:
      summary: container self-description
      description: Returns a detailed description of the container properties.
      operationId: identify
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelfDescription'
        '400':
          $ref: '#/components/responses/400BadRequest'
  /report:
    get:
      summary: get report
      description: |-
        Returns Report if the job associated with the given token exists.
      operationId: get_report
      tags:
        - build
        - validation
      parameters:
        - $ref: '#/components/parameters/Token'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Report'
                  - type: object
                    properties:
                      data:
                        oneOf:
                          - $ref: '#/components/schemas/BuildJobData'
                          - $ref: '#/components/schemas/ValidationJobData'
                    example:
                      data:
                        success: true
                        valid: false
                        details:
                          plugin-1:
                            success: true
                            valid: true
                            log:
                              INFO:
                                - datetime: "2024-01-01T00:00:01+00:00"
                                  origin: plugin-1
                                  body: IP is valid
                          plugin-2:
                            success: true
                            valid: false
                            log:
                              ERROR:
                                - datetime: "2024-01-01T00:00:01+00:00"
                                  origin: plugin-2
                                  body: Required tag '<...>' is not present in bag-info.txt.
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NoTarget'
        '503':
          $ref: '#/components/responses/503Busy'
  /build:
    post:
      summary: build IP
      description: |-
        Build an Information Package (IP) from a given Intellectual Entity (IE).

        The IP metadata is validated against the profiles included in the request,
        or the default profiles otherwise.

        If the request is accepted, a 201-response is triggered containing a JobToken.
      operationId: build
      tags:
        - build
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                build:
                  type: object
                  properties:
                    target:
                      $ref: '#/components/schemas/BuildTarget'
                    mappingPlugin:
                      type: object
                      description:
                        plugin to be used for mapping source-metadata to
                        IP-metadata
                      properties:
                        plugin:
                          type: string
                          description: |-
                            plugin identifier

                            (see contents of `configuration.plugins` as
                            listed in a response to the GET-/identify
                            endpoint; accepted plugin context:
                            "mapping")
                          example: oai-mapper
                        args:
                          type: object
                          description: |-
                            plugin arguments

                            (see contents of `configuration.plugins` as
                            listed in a response to the GET-/identify
                            endpoint for details on the plugin-specific
                            call signature)
                          example:
                            additionalMetadata:
                              DC-Rights: "CC BY-NC 4.0"
                      required:
                        - plugin
                        - args
                    validate:
                      type: boolean
                      description:
                        whether to run validation on the generated IP
                        (see also /validate)
                      default: true
                      example: true
                    BagItProfile:
                      $ref: '#/components/schemas/JSONProfile'
                    BagItPayloadProfile:
                      $ref: '#/components/schemas/JSONProfile'
                  required:
                    - target
                    - mappingPlugin
                token:
                  type: string
                  description:
                    idempotency identifier; if submitted previously, returns
                    the associated job token; otherwise uses this value as
                    new token's value
                  example: 37ee72d6-80ab-4dcd-a68d-f8d32766c80d
                callbackUrl:
                  $ref: '#/components/schemas/CallbackUrl'
              required:
                - build
      callbacks:
        termination:
          $ref: '#/components/callbacks/termination'
      responses:
        '201':
          $ref: '#/components/responses/201AcceptedSubmission'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NoTarget'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
        '503':
          $ref: '#/components/responses/503Busy'
    delete:
      summary: abort job
      description:
        Aborts the execution of a build job (if already running) or removes it
        from queue (otherwise). This operation is performed
        synchronously.
      operationId: abort_build
      tags:
        - build
      parameters:
        - $ref: '#/components/parameters/Token'
        - name: broadcast
          in: query
          description:
            whether this request should be broadcasted
            (only relevant in parallel deployment and only if message
            broadcasting is configured)
          schema:
            type: boolean
            default: true
          required: false
        - name: re-queue
          in: query
          description:
            whether the associated token should be added to the queue
            again
          schema:
            type: boolean
            default: false
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                origin:
                  type: string
                  description: verbose origin of request
                  example: frontend
                reason:
                  type: string
                  description: verbose reason for request
                  example: user abort
      responses:
        '200':
          description: success
          content:
            text/plain:
              schema:
                type: string
                example:
                  "successfully aborted '37ee72d6-80ab-4dcd-a68d-f8d32766c80d'"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '502':
          description: bad gateway
          content:
            text/plain:
              schema:
                type: string
                example:
                  "notification service unavailable"
  /validate:
    post:
      summary: validate IP
      description: |-
        Validate a previously built IP.

        If the request is accepted, a 201-response is triggered
        containing a JobToken.
      operationId: validate
      tags:
        - validation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                validation:
                  type: object
                  properties:
                    target:
                      $ref: '#/components/schemas/ValidationTarget'
                    BagItProfile:
                      $ref: '#/components/schemas/JSONProfile'
                    BagItPayloadProfile:
                      $ref: '#/components/schemas/JSONProfile'
                  required:
                    - target
                token:
                  type: string
                  description:
                    idempotency identifier; if submitted previously, returns
                    the associated job token; otherwise uses this value as
                    new token's value
                  example: 37ee72d6-80ab-4dcd-a68d-f8d32766c80d
                callbackUrl:
                  $ref: '#/components/schemas/CallbackUrl'
              required:
                - validation
      callbacks:
        termination:
          $ref: '#/components/callbacks/termination'
      responses:
        '201':
          $ref: '#/components/responses/201AcceptedSubmission'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NoTarget'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
        '503':
          $ref: '#/components/responses/503Busy'
    delete:
      summary: abort job
      description:
        Aborts the execution of a validation job (if already running) or removes it
        from queue (otherwise). This operation is performed
        synchronously.
      operationId: abort_validation
      tags:
        - validation
      parameters:
        - $ref: '#/components/parameters/Token'
        - name: broadcast
          in: query
          description:
            whether this request should be broadcasted
            (only relevant in parallel deployment and only if message
            broadcasting is configured)
          schema:
            type: boolean
            default: true
          required: false
        - name: re-queue
          in: query
          description:
            whether the associated token should be added to the queue
            again
          schema:
            type: boolean
            default: false
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                origin:
                  type: string
                  description: verbose origin of request
                  example: frontend
                reason:
                  type: string
                  description: verbose reason for request
                  example: user abort
      responses:
        '200':
          description: success
          content:
            text/plain:
              schema:
                type: string
                example:
                  "successfully aborted '37ee72d6-80ab-4dcd-a68d-f8d32766c80d'"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '502':
          description: bad gateway
          content:
            text/plain:
              schema:
                type: string
                example:
                  "notification service unavailable"
components:
  schemas:
    Status:
      title: ContainerStatus
      description:
        A ContainerStatus gives a summary of the container's status like
        availability for job submissions
      type: object
      properties:
        ready:
          type: boolean
          description: availability of container for a request
          example: true
      required:
        - ready
    Path:
      title: Path
      description: relative path for referencing an IE or IP in file storage
      type: string
      example: jobs/abcde-12345-fghijk-67890
    ISODateTime:
      title: ISODateTime
      description: ISO-8601 datetime-stamp
      type: string
      pattern: /[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[+-][0-9]{2}:[0-9]{2}/
      example: "2024-01-01T00:00:00+01:00"
    Token: # see also components/parameters/Token
      title: Token
      description: unique identifier
      type: string
      example: 37ee72d6-80ab-4dcd-a68d-f8d32766c80d
    JobToken:
      title: JobToken
      description:
        A JobToken is used to uniquely identify a specific job.
      type: object
      properties:
        value:
          $ref: '#/components/schemas/Token'
        expires:
          type: boolean
          description: does the token expire
          example: true
        expires_at:
          $ref: '#/components/schemas/ISODateTime'
      required:
        - value
        - expires
    JSONProfile:
      title: JSONProfile
      type: string
      description: relative path referencing a BagIt or payload profile in file storage
      example: bagit_profiles/dcm_bagit_profile_v1.0.0.json
    BuildTarget:
      title: BuildTarget
      description:
        Target IE for building an IP. It is represented by its relative path
        within the shared filesystem.
      type: object
      properties:
        path:
          $ref: '#/components/schemas/Path'
      required:
        - path
    ValidationTarget:
      title: ValidationTarget
      description:
        Target IP for validation. It is represented by its relative path
        within the shared filesystem.
      type: object
      properties:
        path:
          $ref: '#/components/schemas/Path'
      required:
        - path
    LogMessage:
      title: LogMessage
      description: |-
        This schema defines the format of the entries occurring in the
        log of a Report. A LogMessage consists of

        * datetime information (regarding time of message creation),
        * an origin (who filed this message), and
        * the actual message.
      type: object
      properties:
        datetime:
          $ref: '#/components/schemas/ISODateTime'
        origin:
          type: string
          description: origin of message creation
          example: IP Builder
        body:
          type: string
          description: message body
          example: Queued job.
      required:
        - datetime
        - origin
        - body
    Log:
      title: Log
      description: |-
        Common Log categories are: ERROR, WARNING, INFO, EVENT,
        NETWORK, FILE_SYSTEM, STARTUP, SHUTDOWN, USER,
        AUTHENTICATION, and SECURITY.
      type: object
      additionalProperties:
        title: LogCategory
        description: |-
          list of LogMessage objects
        type: array
        items:
          $ref: "#/components/schemas/LogMessage"
      example:
        INFO:
          - datetime: "2024-01-01T00:00:00+01:00"
            origin: IP Builder
            body: Using default value '<...>' for argument '<...>'.
        EVENT:
          - datetime: "2024-01-01T00:00:00+01:00"
            origin: IP Builder
            body: Queued job.
          - datetime: "2024-01-01T00:00:02+01:00"
            origin: IP Builder
            body: Job exited normally.
    ValidationJobData:
      title: ValidationJobData
      description: validation job output data (data-property in Report schema)
      type: object
      properties:
        requestType:
          type: string
          description: discriminator for different JobData-schemas
          enum:
            - validation
        success:
          type: boolean
          description: whether the process has been successful
        valid:
          type: boolean
          description: overall validity; true if IP is valid
        originSystemId:
          type: string
          description: identifier of the origin system
          example: oai:origin
        externalId:
          type: string
          description: identifier of the record in the external system
          example: b29bb376-3e2c-4a1e-af90-96c094daf5c3
        details:
          type: object
          description: detailed validation results by plugin
          additionalProperties:
            type: object
            description: plugin execution details
            properties:
              success:
                type: boolean
                description: whether the process has been successful
              valid:
                type: boolean
                description: validation result
              log:
                $ref: "#/components/schemas/Log"
            required:
              - log
      required:
        - requestType
      example:
        success: true
        valid: false
        details:
          bagit-profile:
            success: true
            valid: false
            log:
              ERROR:
                - datetime: "2024-01-01T00:00:01+00:00"
                  origin: Profile Validator
                  body: Required tag '<...>' is not present in bag-info.txt.
              INFO:
                - datetime: "2024-01-01T00:00:01+00:00"
                  origin: Profile Validator
                  body: Bag does not conform to profile '<...>'.
    BuildJobData:
      title: BuildJobData
      description: build job output data (data-property in Report schema)
      type: object
      properties:
        requestType:
          type: string
          description: discriminator for different JobData-schemas
          enum:
            - build
        path:
          $ref: '#/components/schemas/Path'
        success:
          type: boolean
          description: whether the process has been successful
        valid:
          type: boolean
          description: overall validity; true if IP is valid
        originSystemId:
          type: string
          description: |-
            identifier of the origin system

            This field is only returned if the original request had
            `"validate": true`.
          example: oai:origin
        externalId:
          type: string
          description: |-
            identifier of the record in the external system

            This field is only returned if the original request had
            `"validate": true`.
          example: b29bb376-3e2c-4a1e-af90-96c094daf5c3
        details:
          type: object
          description: detailed results by plugin
          additionalProperties:
            type: object
            description: plugin execution details
            properties:
              success:
                type: boolean
                description: whether the process has been successful
              log:
                $ref: "#/components/schemas/Log"
            additionalProperties: true
            required:
              - log
      required:
        - requestType
      example:
        success: true
        path: ip/abcde-12345-fghijk-67890
        details:
          build:
            success: true
            path: ip/abcde-12345-fghijk-67890
            log:
              INFO:
                - datetime: "2024-01-01T00:00:01+00:00"
                  origin: Builder
                  body: Successfully built IP.
    Report:
      title: Report
      description: |-
        A Report contains

        * information on job details (host, token),
        * information on the progress of a job,
        * a collection of log messages (categorized), and
        * job output data.
      type: object
      properties:
        host:
          type: string
          description: service url where this report has been generated
          example: https://www.lzv.nrw/ip_builder
        token:
          $ref: '#/components/schemas/JobToken'
        args:
          type: object
          description: request body contents given during submission
        progress:
          type: object
          properties:
            status:
              type: string
              description: job status in processing pipeline
              enum:
                - queued
                - running
                - aborted
                - completed
            verbose:
              type: string
              description: verbose description of job-progress
              example: Stage 1/2 (harvest) - collecting identifiers
            numeric:
              type: integer
              description: numeric representation of progress in percent
              example: 25
          required:
            - status
            - verbose
            - numeric
        log:
          $ref: "#/components/schemas/Log"
      required:
        - host
        - token
        - args
        - progress
        - log
      example:
        host: https://www.lzv.nrw/ip_builder
        token:
          value: 37ee72d6-80ab-4dcd-a68d-f8d32766c80d
          expires: true
          expires_at: "2024-01-01T00:00:00+01:00"
        args:
          build:
            target:
              path: ie/abcde-12345-fghijk-67890
            mappingPlugin:
              plugin: oai-mapper
              args:
                additionalMetadata:
                  DC-Rights: "CC BY-NC 4.0"
        progress:
          status: completed
          verbose: Job terminated normally.
          numeric: 100
        log:
          EVENT:
            - datetime: "2024-01-01T00:00:00+01:00"
              origin: IP Builder
              body: Job accepted.
            - datetime: "2024-01-01T00:00:02+01:00"
              origin: IP Builder
              body: Job terminated.
    CallbackUrl:
      type: string
      description: job-termination callback url
      example: https://www.lzv.nrw/callback
    PluginArgSignature:
      title: PluginArgSignature
      type: object
      description: plugin argument
      properties:
        type:
          type: string
          description: JSON type of the argument
          enum:
            - "string"
            - "integer"
            - "number"
            - "boolean"
            - "array"
            - "object"
          example: string
        required:
          type: boolean
          description:
            if true, this argument is required for a valid request
          example: false
        description:
          type: string
          description: description of argument's purpose
          example: this argument sets ...
        example:
          description: example for argument value
          example: 0
        default:
          description: |-
            default value

            only applicable in case of "required: false" and only to
            primitive types or array
          example: 0
        itemType:
          type: string
          enum:
            - "string"
            - "integer"
            - "number"
            - "boolean"
          description: |-
            required in case of "type: array"; type of array elements

            Note that all arguments in an array are required to have the
            same type and cannot have default values assigned individually.
            A default can be given for the entire array in the parent
            PluginArgSignature. Only primitive types are allowed.
        properties:
          type: object
          description: |-
            required in case of "type: object"; mapping of child-names
            and child-PluginArgSignature
          additionalProperties:  # valid but not rendered in SwaggerUI
            $ref: '#/components/schemas/PluginArgSignature'
        additional_properties:
          type: boolean
          description: |-
            only applicable in case of "type: object"; if false, only
            explicitly listed properties are accepted
          example: false
      example:
        type: integer
        required: false
        default: 0
      required:
        - type
        - required
    Plugin:
      title: Plugin
      description: DCM-service plugin
      type: object
      properties:
        name:
          type: string
          description: plugin identifier
          example: plugin-0
        description:
          type: string
          description: description of plugin features
          example: performs ...
        signature:
          $ref: '#/components/schemas/PluginArgSignature'
        context:
          type: string
          description: identifier for the plugin context
          example: context-0
        dependencies:
          type: object
          description: plugin's dependency versions
          additionalProperties:
            type: string
            description: dependency version
          example:
            dependency-a: "1.0.0"
        info:
          type: object
          description: plugin-specific information in custom format
          additionalProperties: true
      required:
        - name
        - description
        - signature
    DBAdapter:
      title: DBAdapter
      type: object
      description:
        A DBAdapter characterizes an adapter for a database by type and
        initialization settings.
      properties:
        type:
          type: string
          description: which adapter-type to use
          enum:
            - native
            - http
          example: http
        settings:
          type: object
          description: |-
            JSON object used to initialize the adapter

            adapter-specific set of settings (used during
            initialization); see dcm-common.db-subpackage for details
          additionalProperties: true
          example:
            url: https://www.lzv.nrw/db
            timeout: 10
            proxies:
              http: https://www.lzv.nrw/proxy
      required:
        - type
        - settings
    SelfDescription:
      type: object
      description: information regarding the service's properties
      properties:
        description:
          type: string
          description:
            a verbose self-description of the service functionality
          example:
            This service provides endpoints for ...
        version:
          type: object
          description: collection of version strings
          properties:
            api:
              type: string
              description: version string of the implemented API
              example: "0.2.0"
            app:
              type: string
              description: version string of the app
              example: "0.1.0"
            python:
              type: string
              description: version of the python implementation
              example: 3.10.12 (main, Mar 22 2024, 16:50:05) [GCC 11.4.0]
            profile:
              type: string
              description: version string of the default BagIt-profile
              example: "0.1.0"
            profile_payload:
              type: string
              description:
                version string of the default BagIt-payload-profile
              example: "0.1.0"
            software:
              type: object
              description: deployed software versions
            lib:
              type: object
              description: deployed library versions
              additionalProperties:
                type: string
                description: version string
                example: "0.1.0"
              example:
                dependency-a: "1.0.0"
                dependency-b: "0.2.0.post1"
          required:
            - api
            - app
            - python
            - software
            - lib
        configuration:
          type: object
          description: service configuration details
          properties:
            settings:
              type: object
              properties:
                allow_cors:
                  type: boolean
                  description: whether CORS requests are allowed
                  example: true
                fs_mount_point:
                  type: string
                  description: mount point of shared file system
                  example: /file_storage
                orchestration:
                  type: object
                  description: orchestration-related settings
                  properties:
                    at_startup:
                      type: boolean
                      description:
                        whether orchestration-processing loop is run at startup
                      example: true
                    queue:
                      $ref: '#/components/schemas/DBAdapter'
                    registry:
                      $ref: '#/components/schemas/DBAdapter'
                    token:
                      type: object
                      description: orchestration token-related settings
                      properties:
                        expiration:
                          type: boolean
                          description: whether job tokens (and their
                            associated info like report) expire
                          example: true
                        duration:
                          type: integer
                          description:
                            time until job token expires in seconds
                          example: 3600
                      required:
                        - expiration
                        - duration
                    debug:
                      type: boolean
                      description: whether to have orchestrator print
                        debug-information
                      example: true
                    controls_api:
                      type: boolean
                      description: whether the orchestration-controls
                        API is available
                      example: true
                    abort:
                      type: object
                      description: |-
                        abort-related settings

                        only relevant in parallel deployment
                      properties:
                        subscription:
                          type: boolean
                          description:
                            whether a subscription to the abort-notifications
                            is made
                          example: true
                        url:
                          type: string
                          description: url of the notification service
                          example: https://www.lzv.nrw/abort-notifications
                        timeout:
                          type: object
                          description: timeout-related settings
                          properties:
                            duration:
                              type: number
                              description: timeout duration
                              example: 1.0
                          required:
                            - duration
                        callback:
                          type: string
                          description: |-
                            url for abort-callbacks

                            if omitted, the subscriber's request address
                            is used (as determined by the notification
                            service)
                          example: https://www.lzv.nrw/subscriber
                      required:
                        - subscription
                    daemon_interval:
                      type: number
                      description:
                        interval of orchestrator-restarts (after crash) in
                        seconds
                      example: 1
                    orchestrator_interval:
                      type: number
                      description: time in seconds between each iteration
                        of the orchestrator's processing loop
                      example: 1
                  required:
                    - at_startup
                    - queue
                    - registry
                    - token
                    - debug
                    - controls_api
                    - abort
                build:
                  type: object
                  description: build-related settings
                  properties:
                    output:
                      type: string
                      description:
                        IP output directory (relative to fs_mount_point)
                      example: ip/
                    manifest:
                      type: array
                      description:
                        list of algorithms used for the generation of
                        manifest files
                      items:
                        type: string
                        description: hash algorithm
                      example:
                        - sha256
                        - sha512
                    tag_manifest:
                      type: array
                      description:
                        list of algorithms used for the generation of
                        tag-manifest files
                      items:
                        type: string
                        description: hash algorithm
                      example:
                        - sha256
                        - sha512
                    default_profile:
                      type: string
                      description: default BagIt profile identifier
                      example: "https://www.lzv.nrw/bagit_profile.json"
                    default_payload_profile:
                      type: string
                      description: default BagIt payload profile identifier
                      example: "https://www.lzv.nrw/payload_profile.json"
                  required:
                    - output
                    - manifest
                    - tag_manifest
                validation:
                  type: object
                  description: validation-related settings
                  properties:
                    default_profile:
                      type: string
                      description: default BagIt profile identifier
                      example: "https://www.lzv.nrw/bagit_profile.json"
                    default_payload_profile:
                      type: string
                      description: default BagIt payload profile identifier
                      example: "https://www.lzv.nrw/payload_profile.json"
                    plugins:
                      type: array
                      description: |-
                        list of default validation plugin identifiers
                      items:
                        type: string
                        description: plugin identifier
                      example:
                        - bagit-profile
                  required:
                    - plugins
              required:
                - allow_cors
                - fs_mount_point
                - orchestration
                - build
                - validation
            plugins:
              type: object
              description: mapping of available plugins
              additionalProperties:
                $ref: "#/components/schemas/Plugin"
              example:
                plugin-0:
                  name: plugin-0
                  description: performs ...
                  signature:
                    type: object
                    required: true
                    properties:
                      param-0:
                        type: integer
                        required: false
                        default: 0
                    additional_properties: false
                  context: context-0
                  dependencies:
                    dependency-a: "1.0.0"
            services:
              type: object
              description:
                mapping of hostname and url for secondary DCM-services
              additionalProperties:
                title: Service
                type: string
                format: url
              example:
                service: <service-url>
          required:
            - settings
            - plugins
            - services
      required:
        - description
        - version
        - configuration
    BaginfoTagCaseSensitive:
      title: BaginfoTagCaseSensitive
      description: boolean for tag case sensitivity in baginfo
      type: boolean
      default: true
      example: true
  parameters:
    Token: # see also components/schemas/Token
      in: query
      name: token
      required: true
      description:
        unique identifier for jobs
      example: 37ee72d6-80ab-4dcd-a68d-f8d32766c80d
      schema:
        $ref: '#/components/schemas/Token'
  responses:
    201AcceptedSubmission:
      description: submission success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JobToken'
    400BadRequest:
      description: malformed request body
      content:
        text/plain:
          schema:
            type: string
            example: "Missing required argument <X>"
    404NoTarget:
      description: target not found
      content:
        text/plain:
          schema:
            type: string
            example: "Resource not found. Target does not exist."
    422SemanticProblem:
      description: semantic problem
      content:
        text/plain:
          schema:
            type: string
            example: "Argument <X> has the wrong type"
    503Busy:
      description: container is busy
      content:
        text/plain:
          schema:
            type: string
            example: "Service unavailable: maximum number of submissions reached."
  callbacks:
    termination:
      '{$request.body#/CallbackUrl}':
        post:
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/JobToken'
          responses:
            '200':
              description: accept callback
